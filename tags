!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Arg	dwm.c	/^} Arg;$/;"	t	typeref:union:__anon12	file:
BUTTONMASK	dwm.c	49;"	d	file:
Button	dwm.c	/^} Button;$/;"	t	typeref:struct:__anon13	file:
CC	config.mk	/^CC = cc$/;"	m
CFLAGS	config.mk	/^CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -Os ${INCS} ${CPPFLAGS}$/;"	m
CLEANMASK	dwm.c	50;"	d	file:
CPPFLAGS	config.mk	/^CPPFLAGS = -D_BSD_SOURCE -D_POSIX_C_SOURCE=2 -DVERSION=\\"${VERSION}\\" ${XINERAMAFLAGS}$/;"	m
Client	dwm.c	/^struct Client {$/;"	s	file:
Client	dwm.c	/^typedef struct Client Client;$/;"	t	typeref:struct:Client	file:
ClkClientWin	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon11	file:
ClkLast	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon11	file:
ClkLtSymbol	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon11	file:
ClkRootWin	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon11	file:
ClkStatusText	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon11	file:
ClkTagBar	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon11	file:
ClkWinTitle	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon11	file:
Clr	drw.h	/^} Clr;$/;"	t	typeref:struct:__anon1
ClrScheme	drw.h	/^} ClrScheme;$/;"	t	typeref:struct:__anon4
Cur	drw.h	/^} Cur;$/;"	t	typeref:struct:__anon2
CurLast	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon7	file:
CurMove	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon7	file:
CurNormal	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon7	file:
CurResize	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon7	file:
Drw	drw.h	/^} Drw;$/;"	t	typeref:struct:__anon5
Extnts	drw.h	/^} Extnts;$/;"	t	typeref:struct:__anon6
Fnt	drw.h	/^} Fnt;$/;"	t	typeref:struct:__anon3
HEIGHT	dwm.c	57;"	d	file:
INCS	config.mk	/^INCS = -I${X11INC}$/;"	m
INTERSECT	dwm.c	51;"	d	file:
ISVISIBLE	dwm.c	53;"	d	file:
Key	dwm.c	/^} Key;$/;"	t	typeref:struct:__anon14	file:
LDFLAGS	config.mk	/^LDFLAGS  = -s ${LIBS}$/;"	m
LENGTH	dwm.c	54;"	d	file:
LIBS	config.mk	/^LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS}$/;"	m
Layout	dwm.c	/^} Layout;$/;"	t	typeref:struct:__anon15	file:
MANPREFIX	config.mk	/^MANPREFIX = ${PREFIX}\/share\/man$/;"	m
MAX	util.h	3;"	d
MIN	util.h	4;"	d
MODKEY	config.def.h	42;"	d
MODKEY	config.h	42;"	d
MOUSEMASK	dwm.c	55;"	d	file:
Monitor	dwm.c	/^struct Monitor {$/;"	s	file:
Monitor	dwm.c	/^typedef struct Monitor Monitor;$/;"	t	typeref:struct:Monitor	file:
NetActiveWindow	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon9	file:
NetClientList	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon9	file:
NetLast	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon9	file:
NetSupported	dwm.c	/^enum { NetSupported, NetWMName, NetWMState,$/;"	e	enum:__anon9	file:
NetWMFullscreen	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon9	file:
NetWMName	dwm.c	/^enum { NetSupported, NetWMName, NetWMState,$/;"	e	enum:__anon9	file:
NetWMState	dwm.c	/^enum { NetSupported, NetWMName, NetWMState,$/;"	e	enum:__anon9	file:
NetWMWindowType	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon9	file:
NetWMWindowTypeDialog	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon9	file:
NumTags	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	s	file:
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
PREFIX	config.mk	/^PREFIX = \/usr\/local$/;"	m
Rule	dwm.c	/^} Rule;$/;"	t	typeref:struct:__anon16	file:
SHCMD	config.def.h	50;"	d
SHCMD	config.h	50;"	d
SRC	Makefile	/^SRC = drw.c dwm.c util.c$/;"	m
SchemeLast	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon8	file:
SchemeNorm	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon8	file:
SchemeSel	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeLast }; \/* color schemes *\/$/;"	e	enum:__anon8	file:
TAGKEYS	config.def.h	43;"	d
TAGKEYS	config.h	43;"	d
TAGMASK	dwm.c	58;"	d	file:
TEXTW	dwm.c	59;"	d	file:
VERSION	config.mk	/^VERSION = 6.1$/;"	m
WIDTH	dwm.c	56;"	d	file:
WMDelete	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon10	file:
WMLast	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon10	file:
WMProtocols	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon10	file:
WMState	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon10	file:
WMTakeFocus	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon10	file:
X11INC	config.mk	/^X11INC = \/usr\/X11R6\/include$/;"	m
X11LIB	config.mk	/^X11LIB = \/usr\/X11R6\/lib$/;"	m
XINERAMAFLAGS	config.mk	/^XINERAMAFLAGS = -DXINERAMA$/;"	m
XINERAMALIBS	config.mk	/^XINERAMALIBS  = -lXinerama$/;"	m
applyrules	dwm.c	/^applyrules(Client *c) {$/;"	f
applysizehints	dwm.c	/^applysizehints(Client *c, int *x, int *y, int *w, int *h, Bool interact) {$/;"	f
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon13	file:
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon14	file:
arrange	dwm.c	/^	void (*arrange)(Monitor *);$/;"	m	struct:__anon15	file:
arrange	dwm.c	/^arrange(Monitor *m) {$/;"	f
arrangemon	dwm.c	/^arrangemon(Monitor *m) {$/;"	f
ascent	drw.h	/^	int ascent;$/;"	m	struct:__anon3
attach	dwm.c	/^attach(Client *c) {$/;"	f
attachstack	dwm.c	/^attachstack(Client *c) {$/;"	f
barwin	dwm.c	/^	Window barwin;$/;"	m	struct:Monitor	file:
baseh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
basew	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
bg	drw.h	/^	Clr *bg;$/;"	m	struct:__anon4
bh	dwm.c	/^static int bh, blw = 0;      \/* bar geometry *\/$/;"	v	file:
blw	dwm.c	/^static int bh, blw = 0;      \/* bar geometry *\/$/;"	v	file:
border	drw.h	/^	Clr *border;$/;"	m	struct:__anon4
borderpx	config.def.h	/^static const unsigned int borderpx  = 1;        \/* border pixel of windows *\/$/;"	v
borderpx	config.h	/^static const unsigned int borderpx  = 1;        \/* border pixel of windows *\/$/;"	v
broken	dwm.c	/^static const char broken[] = "broken";$/;"	v	file:
button	dwm.c	/^	unsigned int button;$/;"	m	struct:__anon13	file:
buttonpress	dwm.c	/^buttonpress(XEvent *e) {$/;"	f
buttons	config.def.h	/^static Button buttons[] = {$/;"	v
buttons	config.h	/^static Button buttons[] = {$/;"	v
bw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	file:
by	dwm.c	/^	int by;               \/* bar geometry *\/$/;"	m	struct:Monitor	file:
checkotherwm	dwm.c	/^checkotherwm(void) {$/;"	f
class	dwm.c	/^	const char *class;$/;"	m	struct:__anon16	file:
cleanup	dwm.c	/^cleanup(void) {$/;"	f
cleanupmon	dwm.c	/^cleanupmon(Monitor *mon) {$/;"	f
clearurgent	dwm.c	/^clearurgent(Client *c) {$/;"	f
click	dwm.c	/^	unsigned int click;$/;"	m	struct:__anon13	file:
clientmessage	dwm.c	/^clientmessage(XEvent *e) {$/;"	f
clients	dwm.c	/^	Client *clients;$/;"	m	struct:Monitor	file:
configure	dwm.c	/^configure(Client *c) {$/;"	f
configurenotify	dwm.c	/^configurenotify(XEvent *e) {$/;"	f
configurerequest	dwm.c	/^configurerequest(XEvent *e) {$/;"	f
createmon	dwm.c	/^createmon(void) {$/;"	f
cursor	drw.h	/^	Cursor cursor;$/;"	m	struct:__anon2
cursor	dwm.c	/^static Cur *cursor[CurLast];$/;"	v	file:
descent	drw.h	/^	int descent;$/;"	m	struct:__anon3
destroynotify	dwm.c	/^destroynotify(XEvent *e) {$/;"	f
detach	dwm.c	/^detach(Client *c) {$/;"	f
detachstack	dwm.c	/^detachstack(Client *c) {$/;"	f
die	util.c	/^die(const char *errstr, ...) {$/;"	f
dirtomon	dwm.c	/^dirtomon(int dir) {$/;"	f
dmenucmd	config.def.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };$/;"	v
dmenucmd	config.h	/^static const char *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };$/;"	v
dmenumon	config.def.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v
dmenumon	config.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:__anon5
dpy	dwm.c	/^static Display *dpy;$/;"	v	file:
drawable	drw.h	/^	Drawable drawable;$/;"	m	struct:__anon5
drawbar	dwm.c	/^drawbar(Monitor *m) {$/;"	f
drawbars	dwm.c	/^drawbars(void) {$/;"	f
drw	dwm.c	/^static Drw *drw;$/;"	v	file:
drw_clr_create	drw.c	/^drw_clr_create(Drw *drw, const char *clrname) {$/;"	f
drw_clr_free	drw.c	/^drw_clr_free(Clr *clr) {$/;"	f
drw_create	drw.c	/^drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h) {$/;"	f
drw_cur_create	drw.c	/^drw_cur_create(Drw *drw, int shape) {$/;"	f
drw_cur_free	drw.c	/^drw_cur_free(Drw *drw, Cur *cursor) {$/;"	f
drw_font_create	drw.c	/^drw_font_create(Display *dpy, const char *fontname) {$/;"	f
drw_font_free	drw.c	/^drw_font_free(Display *dpy, Fnt *font) {$/;"	f
drw_font_getexts	drw.c	/^drw_font_getexts(Fnt *font, const char *text, unsigned int len, Extnts *tex) {$/;"	f
drw_font_getexts_width	drw.c	/^drw_font_getexts_width(Fnt *font, const char *text, unsigned int len) {$/;"	f
drw_free	drw.c	/^drw_free(Drw *drw) {$/;"	f
drw_map	drw.c	/^drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h) {$/;"	f
drw_rect	drw.c	/^drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int empty, int invert) {$/;"	f
drw_resize	drw.c	/^drw_resize(Drw *drw, unsigned int w, unsigned int h) {$/;"	f
drw_setfont	drw.c	/^drw_setfont(Drw *drw, Fnt *font) {$/;"	f
drw_setscheme	drw.c	/^drw_setscheme(Drw *drw, ClrScheme *scheme) {$/;"	f
drw_text	drw.c	/^drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, const char *text, int invert) {$/;"	f
enternotify	dwm.c	/^enternotify(XEvent *e) {$/;"	f
expose	dwm.c	/^expose(XEvent *e) {$/;"	f
f	dwm.c	/^	float f;$/;"	m	union:__anon12	file:
fg	drw.h	/^	Clr *fg;$/;"	m	struct:__anon4
fnt	dwm.c	/^static Fnt *fnt;$/;"	v	file:
focus	dwm.c	/^focus(Client *c) {$/;"	f
focusin	dwm.c	/^focusin(XEvent *e) { \/* there are some broken focus acquiring clients *\/$/;"	f
focusmon	dwm.c	/^focusmon(const Arg *arg) {$/;"	f
focusstack	dwm.c	/^focusstack(const Arg *arg) {$/;"	f
font	config.def.h	/^static const char font[]            = "-*-terminus-medium-r-*-*-16-*-*-*-*-*-*-*";$/;"	v
font	config.h	/^static const char font[]            = "-*-Bitstream Vera Sans-medium-r-*-*-999999999-*-*-*-*-*-*-*";$/;"	v
font	drw.h	/^	Fnt *font;$/;"	m	struct:__anon5
func	dwm.c	/^	void (*func)(const Arg *);$/;"	m	struct:__anon14	file:
func	dwm.c	/^	void (*func)(const Arg *arg);$/;"	m	struct:__anon13	file:
gc	drw.h	/^	GC gc;$/;"	m	struct:__anon5
getatomprop	dwm.c	/^getatomprop(Client *c, Atom prop) {$/;"	f
getrootptr	dwm.c	/^getrootptr(int *x, int *y) {$/;"	f
getstate	dwm.c	/^getstate(Window w) {$/;"	f
gettextprop	dwm.c	/^gettextprop(Window w, Atom atom, char *text, unsigned int size) {$/;"	f
grabbuttons	dwm.c	/^grabbuttons(Client *c, Bool focused) {$/;"	f
grabkeys	dwm.c	/^grabkeys(void) {$/;"	f
h	drw.h	/^	unsigned int h;$/;"	m	struct:__anon3
h	drw.h	/^	unsigned int h;$/;"	m	struct:__anon6
h	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon5
h	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
handler	dwm.c	/^static void (*handler[LASTEvent]) (XEvent *) = {$/;"	v	file:
i	dwm.c	/^	int i;$/;"	m	union:__anon12	file:
inch	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
incnmaster	dwm.c	/^incnmaster(const Arg *arg) {$/;"	f
incw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
instance	dwm.c	/^	const char *instance;$/;"	m	struct:__anon16	file:
isfixed	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
isfloating	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
isfloating	dwm.c	/^	Bool isfloating;$/;"	m	struct:__anon16	file:
isfullscreen	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
isuniquegeom	dwm.c	/^isuniquegeom(XineramaScreenInfo *unique, size_t n, XineramaScreenInfo *info) {$/;"	f	file:
isurgent	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
keypress	dwm.c	/^keypress(XEvent *e) {$/;"	f
keys	config.def.h	/^static Key keys[] = {$/;"	v
keys	config.h	/^static Key keys[] = {$/;"	v
keysym	dwm.c	/^	KeySym keysym;$/;"	m	struct:__anon14	file:
killclient	dwm.c	/^killclient(const Arg *arg) {$/;"	f
layouts	config.def.h	/^static const Layout layouts[] = {$/;"	v
layouts	config.h	/^static const Layout layouts[] = {$/;"	v
limitexceeded	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	m	struct:NumTags	file:
lt	dwm.c	/^	const Layout *lt[2];$/;"	m	struct:Monitor	file:
ltsymbol	dwm.c	/^	char ltsymbol[16];$/;"	m	struct:Monitor	file:
main	dwm.c	/^main(int argc, char *argv[]) {$/;"	f
main	transient.c	/^int main(void) {$/;"	f
manage	dwm.c	/^manage(Window w, XWindowAttributes *wa) {$/;"	f
mappingnotify	dwm.c	/^mappingnotify(XEvent *e) {$/;"	f
maprequest	dwm.c	/^maprequest(XEvent *e) {$/;"	f
mask	dwm.c	/^	unsigned int mask;$/;"	m	struct:__anon13	file:
maxa	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	file:
maxh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
maxw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
mfact	config.def.h	/^static const float mfact      = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfact	config.h	/^static const float mfact      = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfact	dwm.c	/^	float mfact;$/;"	m	struct:Monitor	file:
mh	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
mina	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	file:
minh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
minw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
mod	dwm.c	/^	unsigned int mod;$/;"	m	struct:__anon14	file:
mon	dwm.c	/^	Monitor *mon;$/;"	m	struct:Client	file:
monitor	dwm.c	/^	int monitor;$/;"	m	struct:__anon16	file:
monocle	dwm.c	/^monocle(Monitor *m) {$/;"	f
mons	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	file:
motionnotify	dwm.c	/^motionnotify(XEvent *e) {$/;"	f
movemouse	dwm.c	/^movemouse(const Arg *arg) {$/;"	f
mw	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
mx	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
my	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
name	dwm.c	/^	char name[256];$/;"	m	struct:Client	file:
netatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	file:
neverfocus	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
next	dwm.c	/^	Client *next;$/;"	m	struct:Client	file:
next	dwm.c	/^	Monitor *next;$/;"	m	struct:Monitor	file:
nexttiled	dwm.c	/^nexttiled(Client *c) {$/;"	f
nmaster	config.def.h	/^static const int nmaster      = 1;    \/* number of clients in master area *\/$/;"	v
nmaster	config.h	/^static const int nmaster      = 1;    \/* number of clients in master area *\/$/;"	v
nmaster	dwm.c	/^	int nmaster;$/;"	m	struct:Monitor	file:
normbgcolor	config.def.h	/^static const char normbgcolor[]     = "#222222";$/;"	v
normbgcolor	config.h	/^static const char normbgcolor[]     = "#222222";$/;"	v
normbordercolor	config.def.h	/^static const char normbordercolor[] = "#444444";$/;"	v
normbordercolor	config.h	/^static const char normbordercolor[] = "#444444";$/;"	v
normfgcolor	config.def.h	/^static const char normfgcolor[]     = "#bbbbbb";$/;"	v
normfgcolor	config.h	/^static const char normfgcolor[]     = "#bbbbbb";$/;"	v
num	dwm.c	/^	int num;$/;"	m	struct:Monitor	file:
numlockmask	dwm.c	/^static unsigned int numlockmask = 0;$/;"	v	file:
oldbw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	file:
oldh	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldstate	dwm.c	/^	Bool isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
oldw	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldx	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldy	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
pop	dwm.c	/^pop(Client *c) {$/;"	f
propertynotify	dwm.c	/^propertynotify(XEvent *e) {$/;"	f
quit	dwm.c	/^quit(const Arg *arg) {$/;"	f
recttomon	dwm.c	/^recttomon(int x, int y, int w, int h) {$/;"	f
resize	dwm.c	/^resize(Client *c, int x, int y, int w, int h, Bool interact) {$/;"	f
resizeclient	dwm.c	/^resizeclient(Client *c, int x, int y, int w, int h) {$/;"	f
resizehints	config.def.h	/^static const Bool resizehints = True; \/* True means respect size hints in tiled resizals *\/$/;"	v
resizehints	config.h	/^static const Bool resizehints = True; \/* True means respect size hints in tiled resizals *\/$/;"	v
resizemouse	dwm.c	/^resizemouse(const Arg *arg) {$/;"	f
restack	dwm.c	/^restack(Monitor *m) {$/;"	f
rgb	drw.h	/^	unsigned long rgb;$/;"	m	struct:__anon1
root	drw.h	/^	Window root;$/;"	m	struct:__anon5
root	dwm.c	/^static Window root;$/;"	v	file:
rules	config.def.h	/^static const Rule rules[] = {$/;"	v
rules	config.h	/^static const Rule rules[] = {$/;"	v
run	dwm.c	/^run(void) {$/;"	f
running	dwm.c	/^static Bool running = True;$/;"	v	file:
scan	dwm.c	/^scan(void) {$/;"	f
scheme	drw.h	/^	ClrScheme *scheme;$/;"	m	struct:__anon5
scheme	dwm.c	/^static ClrScheme scheme[SchemeLast];$/;"	v	file:
screen	drw.h	/^	int screen;$/;"	m	struct:__anon5
screen	dwm.c	/^static int screen;$/;"	v	file:
sel	dwm.c	/^	Client *sel;$/;"	m	struct:Monitor	file:
selbgcolor	config.def.h	/^static const char selbgcolor[]      = "#005577";$/;"	v
selbgcolor	config.h	/^static const char selbgcolor[]      = "#005577";$/;"	v
selbordercolor	config.def.h	/^static const char selbordercolor[]  = "#005577";$/;"	v
selbordercolor	config.h	/^static const char selbordercolor[]  = "#005577";$/;"	v
selfgcolor	config.def.h	/^static const char selfgcolor[]      = "#eeeeee";$/;"	v
selfgcolor	config.h	/^static const char selfgcolor[]      = "#eeeeee";$/;"	v
sellt	dwm.c	/^	unsigned int sellt;$/;"	m	struct:Monitor	file:
selmon	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	file:
seltags	dwm.c	/^	unsigned int seltags;$/;"	m	struct:Monitor	file:
sendevent	dwm.c	/^sendevent(Client *c, Atom proto) {$/;"	f
sendmon	dwm.c	/^sendmon(Client *c, Monitor *m) {$/;"	f
set	drw.h	/^	XFontSet set;$/;"	m	struct:__anon3
setclientstate	dwm.c	/^setclientstate(Client *c, long state) {$/;"	f
setfocus	dwm.c	/^setfocus(Client *c) {$/;"	f
setfullscreen	dwm.c	/^setfullscreen(Client *c, Bool fullscreen) {$/;"	f
setlayout	dwm.c	/^setlayout(const Arg *arg) {$/;"	f
setmfact	dwm.c	/^setmfact(const Arg *arg) {$/;"	f
setup	dwm.c	/^setup(void) {$/;"	f
sh	dwm.c	/^static int sw, sh;           \/* X display screen geometry width, height *\/$/;"	v	file:
showbar	config.def.h	/^static const Bool showbar           = True;     \/* False means no bar *\/$/;"	v
showbar	config.h	/^static const Bool showbar           = True;     \/* False means no bar *\/$/;"	v
showbar	dwm.c	/^	Bool showbar;$/;"	m	struct:Monitor	file:
showhide	dwm.c	/^showhide(Client *c) {$/;"	f
sigchld	dwm.c	/^sigchld(int unused) {$/;"	f
snap	config.def.h	/^static const unsigned int snap      = 32;       \/* snap pixel *\/$/;"	v
snap	config.h	/^static const unsigned int snap      = 32;       \/* snap pixel *\/$/;"	v
snext	dwm.c	/^	Client *snext;$/;"	m	struct:Client	file:
spawn	dwm.c	/^spawn(const Arg *arg) {$/;"	f
stack	dwm.c	/^	Client *stack;$/;"	m	struct:Monitor	file:
stext	dwm.c	/^static char stext[256];$/;"	v	file:
sw	dwm.c	/^static int sw, sh;           \/* X display screen geometry width, height *\/$/;"	v	file:
symbol	dwm.c	/^	const char *symbol;$/;"	m	struct:__anon15	file:
tag	dwm.c	/^tag(const Arg *arg) {$/;"	f
tagmon	dwm.c	/^tagmon(const Arg *arg) {$/;"	f
tags	config.def.h	/^static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };$/;"	v
tags	config.h	/^static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };$/;"	v
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:Client	file:
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:__anon16	file:
tagset	dwm.c	/^	unsigned int tagset[2];$/;"	m	struct:Monitor	file:
termcmd	config.def.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v
termcmd	config.h	/^static const char *termcmd[]  = { "urxvt", NULL };$/;"	v
tile	dwm.c	/^tile(Monitor *m) {$/;"	f
title	dwm.c	/^	const char *title;$/;"	m	struct:__anon16	file:
togglebar	dwm.c	/^togglebar(const Arg *arg) {$/;"	f
togglefloating	dwm.c	/^togglefloating(const Arg *arg) {$/;"	f
toggletag	dwm.c	/^toggletag(const Arg *arg) {$/;"	f
toggleview	dwm.c	/^toggleview(const Arg *arg) {$/;"	f
topbar	config.def.h	/^static const Bool topbar            = True;     \/* False means bottom bar *\/$/;"	v
topbar	config.h	/^static const Bool topbar            = True;     \/* False means bottom bar *\/$/;"	v
topbar	dwm.c	/^	Bool topbar;$/;"	m	struct:Monitor	file:
ui	dwm.c	/^	unsigned int ui;$/;"	m	union:__anon12	file:
unfocus	dwm.c	/^unfocus(Client *c, Bool setfocus) {$/;"	f
unmanage	dwm.c	/^unmanage(Client *c, Bool destroyed) {$/;"	f
unmapnotify	dwm.c	/^unmapnotify(XEvent *e) {$/;"	f
updatebarpos	dwm.c	/^updatebarpos(Monitor *m) {$/;"	f
updatebars	dwm.c	/^updatebars(void) {$/;"	f
updateclientlist	dwm.c	/^updateclientlist() {$/;"	f
updategeom	dwm.c	/^updategeom(void) {$/;"	f
updatenumlockmask	dwm.c	/^updatenumlockmask(void) {$/;"	f
updatesizehints	dwm.c	/^updatesizehints(Client *c) {$/;"	f
updatestatus	dwm.c	/^updatestatus(void) {$/;"	f
updatetitle	dwm.c	/^updatetitle(Client *c) {$/;"	f
updatewindowtype	dwm.c	/^updatewindowtype(Client *c) {$/;"	f
updatewmhints	dwm.c	/^updatewmhints(Client *c) {$/;"	f
v	dwm.c	/^	const void *v;$/;"	m	union:__anon12	file:
view	dwm.c	/^view(const Arg *arg) {$/;"	f
w	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon5
w	drw.h	/^	unsigned int w;$/;"	m	struct:__anon6
w	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
wh	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
win	dwm.c	/^	Window win;$/;"	m	struct:Client	file:
wintoclient	dwm.c	/^wintoclient(Window w) {$/;"	f
wintomon	dwm.c	/^wintomon(Window w) {$/;"	f
wmatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	file:
ww	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
wx	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
wy	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
x	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
xerror	dwm.c	/^xerror(Display *dpy, XErrorEvent *ee) {$/;"	f
xerrordummy	dwm.c	/^xerrordummy(Display *dpy, XErrorEvent *ee) {$/;"	f
xerrorstart	dwm.c	/^xerrorstart(Display *dpy, XErrorEvent *ee) {$/;"	f
xerrorxlib	dwm.c	/^static int (*xerrorxlib)(Display *, XErrorEvent *);$/;"	v	file:
xfont	drw.h	/^	XFontStruct *xfont;$/;"	m	struct:__anon3
y	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
zoom	dwm.c	/^zoom(const Arg *arg) {$/;"	f
